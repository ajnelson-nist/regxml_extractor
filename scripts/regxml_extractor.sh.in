#!/bin/bash

# Copyright (c) 2012, Regents of the University of California
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of California, Santa Cruz nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    

#Set autotool variables
GNU_GETOPT=@GNU_GETOPT@
PYTHON=@PYTHON@
prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=$exec_prefix/bin
pkgdatadir=@datadir@/@PACKAGE@

#Set up usage string
usage="Usage: $0 [option]... <disk image>\n"
usage=$usage"Options:\n"
usage=$usage"\t-d, --debug\n"
usage=$usage"\t  Enable debug output (writes to stderr).\n"
usage=$usage"\t-o outdir, --output=outdir\n"
usage=$usage"\t  Output files into target directory.  Does not need to be empty.  Defaults to present working directory.\n"
usage=$usage"\t-x fiout.dfxml, --xml=fiout.dfxml\n"
usage=$usage"\t  Import DFXML, such as from a previous run of Fiwalk. The DFXML is soft-linked in the output directory to its absolute path.\n"
usage=$usage"\t  DFXML is created afresh if this option is absent.\n"
usage=$usage"\n"
usage=$usage"Experimental options:\n"
usage=$usage"\n"
usage=$usage"\t--hive\n"
usage=$usage"\t  Instead of processing a disk image, process just a single hive.\n"
usage=$usage"\t--hive-name=label\n"
usage=$usage"\t  Provide an arbitrary name for the hive file.\n"
usage=$usage"\t  --hive must be passed if you use this option.\n"
usage=$usage"\t--hive-path=path\n"
usage=$usage"\t  Provide the subject disk's file system path of the hive file.\n"
usage=$usage"\t  --hive must be passed if you use this option.\n"
usage=$usage"\n"
usage=$usage"Note that the results are written to the current working directory by default.\n"

usage_exit() {
  printf "$usage" >&2
  exit 1
}

#Set command-line defaults
outdir=$PWD
fiout=fiout.dfxml
fiout_import=""
debug=0

hive_mode=0
hive_name=""
hive_path=""

#Canonicalize command-line options with GNU getopt
#  BSD getopt (default on OS X) does not behave correctly <http://stackoverflow.com/a/7948533/1207160>.
#  Another example of getopt usage, quicker to read but needs 'eval', is earlier in the same thread <http://stackoverflow.com/a/5230306/1207160>.
if ! options=$(${GNU_GETOPT} -o dho:x: -l debug,help,hive,hive-name:,hive-path:,output:,xml: -- "$@"); then
  # Something went wrong; getopt should report what.
  exit 1
fi
eval set -- "$options"

#Handle command-line arguments and options
while [ $# -ge 1 ]; do
  case $1 in
    -d | --debug )
      debug=1
      ;;
    -h | --help )
      printf "$usage"
      exit 0
      ;;
    --hive )
      hive_mode=1
      ;;
    --hive-name )
      hive_name=$2
      shift
      ;;
    --hive-path )
      hive_path=$2
      shift
      ;;
    -o | --output )
      outdir=$2
      if [ -e "$outdir" -a ! -d "$outdir" ]; then
        echo "Error: Specified output directory (supplied to $1) is not a directory." >&2
        exit 1
      fi
      shift
      ;;
    -x | --xml )
      fiout_import=$("$PYTHON" -c 'import os, sys; print(os.path.realpath(sys.argv[1]))' "$2")
      if [ ! -r "$fiout_import" ]; then
        echo "Error: Fiwalk output (supplied to $1) is not a readable file." >&2
        exit 1
      fi
      if [ -r "$fiout" ]; then
        echo "Warning: $fiout already present. Ignoring $1 parameter." >&2
        fiout_import=
      fi
      shift
      ;;
    -- )
      shift
      break
      ;;
    * )
      echo "Error: Unexpected command-line argument ($1)." >&2
      echo >&2
      usage_exit
  esac
  shift
done

if [ $# -lt 1 ]; then
  echo "Error: More arguments required." >&2
  echo >&2
  usage_exit
fi

#Check options for hive-only mode
if [ ! -z "$hive_name" -o ! -z "$hive_path" ]; then
  if [ $hive_mode -ne 1 ]; then
    echo "Error: Individual hive details provided, but hive mode (--hive) not specified." >&2
    echo >&2
    usage_exit
  fi
fi

hivefile=$("$PYTHON" -c 'import os, sys; print(os.path.realpath(sys.argv[1]))' "$1")

if [ ! -r "$hivefile" ]; then
  echo "Hive file ($hivefile) is not a readable file." >&2
  echo >&2
  usage_exit
fi

if [ $debug -eq 1 ]; then
  echo "Debug enabled." >&2
  echo "After parsing arguments, settings are:" >&2
  echo "- Output directory: $outdir" >&2
fi

#Create output directory if it doesn't exist.  Fail if we can't change into it.
mkdir -p "$outdir"
if [ ! -d "$outdir" ]; then
  echo "Error: Could not create output directory." >&2
  exit 1
fi

pushd "$outdir" >/dev/null
if [ $? -ne 0 ]; then
  echo "Error: Could not change into output directory." >&2
  exit 1
fi

#Generate manifest file
printf "$hivefile\t\t$hive_path\t\t\t\t\n" >manifest.txt

# For each regxml file generated, run xmllint to validate and pretty-print
rm -f linted.txt out.sqlite
#The 'linted.txt' file contains all the RegXML files that passed xmllint's pretty-printing; note the file can be empty.
touch linted.txt
if [ $(ls "$hivefile" 2>/dev/null | wc -l) -eq 0 ]; then
  echo "Note: No hives extracted."
else
  for x in "$hivefile";
  do
    #Generate RegXML
    hivexml "${x}" >"${x}.regxml" 2>"${x}.hivexml.err.log"
    rchivexml=$?
    echo $rchivexml >"${x}.hivexml.status.log"
    [ $rchivexml -ne 0 ] && continue

    #If hivexml was successful, syntax-check RegXML, logging successes
    xmllint --format "${x}.regxml" >"${x}.checked.regxml" 2>"${x}.xmllint.err.log"
    rcxmllint=$?
    [ $rcxmllint -eq 0 ] && printf "$PWD/$x\t$PWD/$x.regxml\n" >>linted.txt
  done
  hives_linted=$(cat linted.txt | wc -l)
  if [ $hives_linted -eq 0 ]; then
    echo "Warning: No RegXML files passed structural validation." >&2
  fi
  # When all regxml is pretty-printed, generate a database
  "$PYTHON" "$pkgdatadir/python/rx_make_database.py" --debug linted.txt manifest.txt out.sqlite || exit 1
  #Check if any of the .regxml files that passed xmllint failed to ingest into SQLite
  hive_ingests_failed=$(sqlite3 out.sqlite 'select count(*) from hives_failed;')
  if [ $hive_ingests_failed -gt 0 ]; then
    #TODO Left-strip the hives_linted variable
    echo "Warning: Some RegXML files failed to convert to SQL (${hive_ingests_failed} of ${hives_linted} checked files failed).  See the hives_failed table in out.sqlite for debug information." >&2
  fi
fi

popd >/dev/null
