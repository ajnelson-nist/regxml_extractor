#!/bin/bash

# Copyright (c) 2012, Regents of the University of California
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of California, Santa Cruz nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    

#Set autotool variables
GNU_GETOPT=@GNU_GETOPT@
PYTHON=@PYTHON@
prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=$exec_prefix/bin

#Set up usage string
usage="Usage: $0 [option]... <disk image>\n"
usage=$usage"Options:\n"
usage=$usage"\t-x fiout.dfxml, --xml=fiout.dfxml\n"
usage=$usage"\t  Import DFXML, such as from a previous run of Fiwalk. DFXML is created if this option is absent."
usage=$usage"\n"
usage=$usage"Note that the results are written to the current working directory.\n"

usage_exit() {
  printf "$usage" >&2
  exit 1
}

#Set command-line defaults
fiout=fiout.dfxml
fiout_import=""
tskout=tskout.db
tskout_import=""

#Handle command-line arguments and options
if [ $# -lt 1 ]; then
  usage_exit
fi

#Do we have Fiwalk output?
if [ ! -f "$fiout" ]; then
  echo "Note: Did not detect Fiwalk output.  Generating fiout.dfxml."
  fiwalk -Xfiout.dfxml -f "$1" >fiout.dfxml.out.log 2>fiout.dfxml.err.log
  status=$?
  if [ $status -ne 0 ]; then
    echo "Error: fiwalk: see fiout.dfxml.err.log.  Resuming, but this may fail." >&2
    fiout=
  else
    fiout=fiout.dfxml
  fi
fi

#Check Fiwalk output
fiout_xmllint_errlog=fiout.dfxml.xmllint.err.log
xmllint "$fiout" >/dev/null 2>"$fiout_xmllint_errlog"
status=$?
if [ $status -ne 0 ]; then
  echo "Error validating DFXML file '$fiout' (error code $status): see $fiout_xmllint_errlog." >&2
  exit 1
fi

tskout=tskout.db
#Generate TSK database output
if [ ! -f "$tskout" ]; then
  echo "Note: Did not detect TSK output. Generating tskout.db."
  tsk_loaddb -d tskout.db "$1" >tskout.db.out.log 2>tskout.db.err.log
  status=$?
  if [ $status -ne 0 ]; then
    echo "Error: tsk_loaddb: see tskout.db.err.log.  Continuing without TSK output."
    tskout=
  else
    tskout=tskout.db
  fi
fi

#Make Fiwalk lookup database
if [ ! -f fiwalk_lookup.db ]; then
  $PYTHON /Users/ajnelson/local/src/regxml_extractor/deps/dfxml/python/verify_fiwalk_versus_tsk_db.py $fiout $tskout fiwalk_lookup.db >fiwalk_lookup.db.out.log 2>fiwalk_lookup.db.err.log
fi

#Does it look like we ran before?
if [ $(ls *hive 2>/dev/null | wc -l) -gt 0 ]; then
  echo "Note: Found some hive files.  Assuming extraction has already run.  If this is wrong, remove *.hive."
else
  maybe_dfxml_flag=
  if [ ! "$fiout" == "" ]; then
    maybe_dfxml_flag=-x"$fiout"
  fi
  #Invoke extraction script
  "$PYTHON" "$bindir/rx_extract_hives.py" $maybe_dfxml_flag "$1" >manifest.txt
fi

# For each regxml file generated, run xmllint to validate and pretty-print
rm -f linted.txt out.sqlite
if [ $(ls *hive | wc -l) -eq 0 ]; then
  echo "Note: No hives extracted."
else
  for x in $(ls *hive);
  do
    hivexml "${x}" >"${x}.regxml" 2>${x}.hivexml.err.log && \
    xmllint --format "${x}.regxml" >"${x}.checked.regxml" 2>${x}.xmllint.err.log&& \
    printf "$PWD/$x\t$PWD/$x.regxml\n" >>linted.txt ;
  done
  # When all regxml is pretty-printed, generate a database
  if [ -f linted.txt ]; then
    "$PYTHON" "$bindir/rx_make_database.py" linted.txt manifest.txt out.sqlite
  fi
fi
